{
  "version": "2.0.0",
  "items" : [
	{
	  "name": "Installation",
	  "language": "markup",
	  "description": null,
	  "code": "",
	  "items": [
		{
		  "name": "npm or github",
		  "language": "markup",
		  "description": "You can install xng via <a href=\"https://www.npmjs.com/package/xng\">npm</a> or download it directly from the <a href=\"https://github.com/ramsondon/xng\">xng github repository</a>. Copy the file xng.min.js from <code>node_modules/xng/dist/xng.min.js</code> into the directory you desire",
		  "code": "api/doc/$version$/text/install.tpl.html"
		},
		{
		  "name": "Requirements",
		  "language": "markup",
		  "description": "xng requires <a href=\"https://lodash.com\">lodash</a> and is tested under the current version 4.17.4.<br/>Include requirements at the end of the body tag to prevent the browser from blocking. Moreover xng is built with the fetch api and therefore requires the browser to support it!",
		  "code": "api/text/index.html"
		},
		{
		  "name": "init xng via javascript",
		  "language": "javascript",
		  "description": "start your xng in your main entry point. in this website we use the github page's index.html",
		  "code": "api/doc/$version$/text/run-js.tpl.js"
		}
	  ]
	},
	{
	  "name": "Concept",
	  "language": "markup",
	  "description": "xng has been designed for offering a short and simple api and therefore works with only 4 HTML5 custom attributes.",
	  "code": "api/doc/$version$/text/concept.tpl.html",
	  "items": [
		{
		  "name": "Routing",
		  "language": "markup",
		  "description": "xng routing is realized via the window location's hash value. This means the main page will be accessible e.g. at <pre>https://ramsondon.github.io/xng</pre> and the changelog page will be at<pre>https://ramsondon.github.io/xng/#changes</pre> and <pre>https://ramsondon.github.io/xng/#changelog</pre>",
		  "code": "api/doc/$version$/text/xng-route.tpl.html"
		},
		{
		  "name": "Views",
		  "language": "markup",
		  "description": "xng views are included automatically asynchronously via the \"data-xng-view\" attribute",
		  "code": "api/doc/$version$/text/xng-view.tpl.html",
		  "items": [
			{
			  "name": "Sample api model",
			  "language": "json",
			  "description": "api route <code>api/my/model.json</code>",
			  "code": "api/doc/$version$/text/sample-model.json.html"
			},
			{
			  "name": "Sample view",
			  "language": "markup",
			  "description": "template to include at <code>views/my/inner.tpl.html</code>",
			  "code": "api/doc/$version$/text/sample-template.tpl.html"
			}
		  ]
		},
		{
		  "name": "Models",
		  "language": "markup",
		  "description": "a model or view data can be automatically assigned via the \"data-xng-model\" attribute or can be assigned directly as objects using the <pre>_.xng.assign(&lt;object&gt;)</pre> method",
		  "code": "api/doc/$version$/text/xng-model.tpl.html"
		},
		{
		  "name": "View Listener",
		  "language": "markup",
		  "description": "a view listener is a pair consisting of one \"data-xng-listener\" attribute and of one handler callback function. the callback is executed when the corresponding view has been rendered successfully",
		  "code": "api/doc/$version$/text/xng-listen.tpl.html"
		}
	  ]
	},
	{
	  "name": "API Reference",
	  "language": "markup",
	  "description": "xng's javascript api is being listed in this section",
	  "code": null,
	  "items": [
		{
		  "name": "_.xng.assign",
		  "language": "markup",
		  "description": "<code>_.xng.assign(&lt;obj : object&gt;) : string</code> serializes an object and escapes the serialized object. this method is used to assign a model to a nested view e.g. an item of an list into a separate item's view. the following example shows the navigation template of this documentation page",
		  "code": "docs/doc-nav.tpl.html"
		},
		{
		  "name": "_.xng.base",
		  "language": "markup",
		  "description": "<code>_.xng.base(&lt;path : string&gt;) : xng</code> sets the base directory prefix for loading templates and models and returns the xng object itself for method chaining. <code>_.xng.base()</code> is an initialization method and should be called before calling <code>_.xng.run()</code>. if it is called afterwards it will not have any effect.",
		  "code": null
		},
		{
		  "name": "_.xng.fetch",
		  "language": "markup",
		  "description": "<code>_.xng.fetch(&lt;resource : string&gt;,&lt;type: string&gt;) : Promise</code>fetches a resource as type \"text\" or \"json\". the resource can be an absolute or relative URL. in the example below we see the asynchronous rendering of the CHANGELOG.md file of this project",
		  "code": "api/doc/$version$/functions/fetch.tpl.html"
		},
		{
		  "name": "_.xng.listen",
		  "language": "markup",
		  "description": "listens to one or more specific view rendered events",
		  "code": null
		},
		{
		  "name": "_.xng.nl2br",
		  "language": "markup",
		  "description": "replaces <code>\\n</code> to <code>&lt;br/&gt;</code>",
		  "code": null
		},
		{
		  "name": "_.xng.put",
		  "language": "markup",
		  "description": "puts specific content to a given dom selector",
		  "code": null
		},
		{
		  "name": "_.xng.require",
		  "language": "markup",
		  "description": "includes one or more javascript files asynchronously and offers a callback on loaded",
		  "code": null
		},
		{
		  "name": "_.xng.route",
		  "language": "markup",
		  "description": "listens to one or more specified routing events",
		  "code": null
		},
		{
		  "name": "_.xng.run",
		  "language": "markup",
		  "description": "xng start up method",
		  "code": null
		}
	  ]
	}
  ]
}